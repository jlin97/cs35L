Exercise 1.1
2. C-n C-f
3. M-} M-} M-} M-} C-n M-f C-f
4. C-v C-v C-v C-v C-v C-v C-v C-n C-n C-n
5. C-n M-e M-e M-e C-n M-f M-f M-f M-f M-f M-f M-f C-f
6. C-e
7. C-a
8. C-s allows for searching of the words, which reduces the # 
of keystrokes to 1 + the number of letters in the word
9. No

Exercise 1.2

2. M-g g 1 8 Enter C-k
3. C-s D E L E T E Enter C-a C-k
4. C-s h t t p s : / / e n C-s Enter C-a C-p C-k C-k C-k C-k C-k 
5. C-s < ! - - Enter C-b C-b C-b C-b C-d C-d C-d C-d C-d C-d C-d

Exercise 1.3

2. C-s A s s i Enter M-f C-f C-d 3 7
C-s A s s i Enter M-f C-f C-d 3 7
3. C-r U T F Enter C-f C-d C-d C-d C-d S - A S C I I
4. C-s < / o l > Enter C-a Enter

Exercise 1.4

3. C-x ] C-p C-p C-p C-p C-p C-f M-k C-r
s h o u l d Enter C-a C-y Enter C-k C-k
C-x ] M-v M-{ M-{ M-h C-w M-g g 3 0 0 Enter C-n C-n C-n C-y 
Backspace Backspace Backspace C-a C-d C-p C-d C-p C-d
C-x ] M-v M-a M-a M-a M-a C-k M-g g 9 0 Enter C-n C-n C-n C-y C-a C-d
C-x ] M-v M-v M-{ C-k M-g g 1 5 Enter C-n C-n C-n C-y C-a C-d
5. C-x ] M-v M-v M-a M-a M-a C-@ C-x ] C-w
6. C-x u
7. - - > M-v M-v M-a M-a M-a < ! - - 
8. C-x [ M-% < o l > Enter < O l > Enter y y y y y y y
The minibuffer stated that there were 7 occurrences 
replaced; thus there were 7 instances.

Exercise 1.5

1. M-x m a k e - d i r e c t o r y Enter j u n k Enter
2. C-x C-f j u n k / h e l l o . c Enter Shift-Insert 
3. M-! g c c SP h e l l o . c Enter
4. M-! . / a . o u t SP > SP h e l l o - o u t
5. M-! c a t SP h e l l o - o u t SP > SP a n s 1 . t x t
#include <stdio.h>
int
main (void)
{
  char n = '\n';
  char b = '\\';
  char q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn';%c  char b = '%c%c';%c  char q = '%c';%c  char const *p = %c\
%s%c;%c  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
  return 0;
}

Exercise 1.6

1. C-x b Enter
2. ( r a n d o m ) C-n C-j
-737004071327947834

3.
( s e t q SP x SP ( r a n d o m ) ) C-n C-j
-407454645627560705

( s e t q SP y SP ( r a n d o m ) ) C-n C-j
-759900912694765332

4.
( * SP x SP y ) C-j
-534622208752590060, the result is not mathematically correct

5.
By using M-:, I got:
-534622208752590060 (#o142245076740621061424, #x1894a3ef06446314)
The output is more elaborate, I get additional values in octal
(radix 8), and in hexadecimal (radix 16)

6. The two random integers are not truly random, they are
generated by an pseudo-random number generating algorithm,
and have certain properties that mimic a random series

7. The probability that the two-variable product is
mathematically correct would be around:
The min value that an int can have: –2147483648
The max value: 2147483647
The total range of possibilities: 
(2147483647-(–2147483648))^2 = 
(4294967295)^2 = 1.8446744e+19
4294967295 / 1.8446744e+19 =
2.3283064e-10, which is a very low probability
because the range of values of an int is much
lower than the number of the possible products 
of two of them.